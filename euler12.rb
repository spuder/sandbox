# The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

# 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

# Let us list the factors of the first seven triangle numbers:

#  1: 1
#  3: 1,3
#  6: 1,2,3,6
# 10: 1,2,5,10
# 15: 1,3,5,15
# 21: 1,3,7,21
# 28: 1,2,4,7,14,28
# We can see that 28 is the first triangle number to have over five divisors.

# What is the value of the first triangle number to have over five hundred divisors?


# Too slow, 

@list_of_divisors=[]

def number_find(number)
	number.downto(1).each do |n|
		if number % n == 0
			@list_of_divisors.push(n)
		end
	end
	#puts "We found #{@list_of_divisors.length} divisors"
	#puts "checked every number, array length #{@list_of_divisors.length}"
	# if @list_of_divisors.length >= 500
	# 	#puts "#{number} contains #{@list_of_divisors.length}"
	# 	# break
	# end

end

(100..1000).each do |n|

	# if n % 100 == 0
	# 	puts "checking #{n}"
	# end
	if @list_of_divisors.length >= 500
		puts "The first number over 500 is #{n}"
		break
	else
		@list_of_divisors=[]
		number_find(n)
	end
end


puts "#{@list_of_divisors}"
