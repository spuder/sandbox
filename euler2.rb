# Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:

# 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

# By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.


@fib=[]


# def find_fib(number)
# 	return number if number <= 1
# 	[value] = (  (find_fib(number -1) ) + ( find_fib(number -2 ) ) )
# 	@fib.push(value)
# end


def fib(n)
  (n == 1) ? [0] : (2..(n-1)).each_with_object([0,1]) { |i,a| a[i] = a[i-2] + a[i-1] }
end

@four_million=Array.new
@four_million.push(0)
# puts @four_million

# puts fib(1)
# puts "==="
# puts fib(2)
# puts "==="
# puts fib(3)
# puts "==="

@temp_fib = []
@temp_fib.push(1)
@temp_fib.push(1)
# temp_sum = @temp_fib.inject(:+)
# puts "Sum of tmp_fib is #{@temp_fib.inject(:+)}"
# puts "temp_sum is #{temp_sum}"
# # sum = 0 

(1..15).each do |n|
	if @temp_fib.length < 1
		puts "looks like length is less than 1"
		sum = 0
	else
		puts "looks like length is greater than 1"
		#Get sum of all items in array
		sum = @temp_fib.inject(:+)
		# puts "not sure why sum is #{sum} and not 0"
		# sum = sum[0] #Convert from array to integer
	end
	puts "Sum is #{sum}"

	if (sum <= 50)
		@temp_fib.clear
		@temp_fib= [fib(n)]
		puts @temp_fib
		puts "===="
	else
		puts "#{n} totals up to #{@temp_fib.inject(:+)}"
	end
	#puts @four_million
end

